#include		<stdlib.h>
namespace		resources
{
	extern const unsigned char free_select[]={0,4,17,0,15,18,0,6,17,0,7,17,0,6,18,0,10,17,0,2,17,0,9,17,0,3,17,0,3,17,0,7,17,0,7,17,0,22,17,0,8,17,0,5,17,0,10,17,0,3,17,0,12,17,0,1,18,0,1,18,0,4,18,0,1,20,0,4,17,0,3,17,0,27,17,0,1,17,0,13,18,0,14,17,0,11,};
	extern const unsigned char select[]={0,49,17,0,1,18,0,1,18,0,1,18,0,1,18,0,1,17,0,1,17,0,13,17,0,17,17,0,13,17,0,1,17,0,13,17,0,17,17,0,13,17,0,1,17,0,13,17,0,17,17,0,13,17,0,1,17,0,1,18,0,1,18,0,1,18,0,1,18,0,1,17,0,32,};
	extern const unsigned char eraser[]={0,39,22,0,9,17,33,49,33,49,33,49,17,0,7,17,33,49,33,49,33,49,18,0,6,17,33,49,33,49,33,49,17,65,17,0,5,17,33,49,33,49,33,49,17,66,17,0,4,17,33,49,33,49,33,49,17,66,17,0,4,17,33,49,33,49,33,49,17,66,17,0,4,17,86,17,66,17,0,5,17,86,17,65,17,0,6,17,86,18,0,8,23,0,56,};
	extern const unsigned char fill[]={0,24,18,0,13,17,33,17,0,8,19,0,1,17,35,18,0,5,19,81,17,35,17,34,17,0,3,19,81,17,102,19,0,2,18,81,17,102,21,0,1,18,81,18,97,17,98,21,97,20,0,2,17,98,21,98,20,0,2,17,97,21,98,17,0,1,19,0,3,21,98,17,0,2,19,0,4,19,98,17,0,4,18,0,5,17,98,17,0,5,18,0,6,18,0,7,17,0,29,};
	extern const unsigned char pick_color[]={0,28,19,0,12,17,81,19,0,10,22,0,8,24,0,9,22,0,9,17,33,20,0,9,17,34,113,18,0,9,17,34,113,17,0,1,17,0,8,17,34,113,17,0,10,17,34,97,17,0,10,17,34,97,17,0,10,17,34,97,17,0,10,97,17,98,17,99,0,7,98,19,101,0,7,103,0,8,};
	extern const unsigned char magnifier[]={0,4,20,0,10,18,84,18,0,7,17,113,35,83,113,17,0,6,17,34,86,17,0,5,17,81,33,88,17,0,4,17,81,33,88,17,0,4,17,90,17,0,4,17,90,17,0,5,17,87,33,17,0,6,17,113,85,33,113,17,113,0,6,18,83,33,113,131,0,8,20,129,81,131,0,12,129,81,131,0,12,129,81,131,0,12,129,81,130,0,13,130,0,2,};
	extern const unsigned char pencil[]={0,9,19,0,12,17,163,17,0,11,17,161,34,17,0,10,18,161,33,17,0,11,17,49,19,0,10,17,49,33,81,17,0,11,17,33,49,18,0,10,17,33,49,81,17,0,11,17,49,33,18,0,10,17,49,33,81,17,0,11,18,49,18,0,11,20,0,12,19,0,13,18,0,14,17,0,27,};
	extern const unsigned char brush[]={0,7,18,0,13,17,66,17,0,12,17,66,17,0,12,17,66,17,0,12,17,66,17,0,12,17,66,17,0,12,17,66,17,0,11,17,68,17,0,9,17,70,17,0,8,24,0,8,24,0,8,17,38,17,0,8,17,33,113,33,113,34,17,0,8,17,33,113,33,113,34,17,0,8,17,33,113,33,113,34,17,0,7,25,0,4,};
	extern const unsigned char airbrush[]={0,18,129,0,1,129,0,2,129,0,9,129,81,129,81,131,19,0,5,129,81,129,81,129,0,1,18,34,18,0,5,129,81,129,0,2,17,34,18,146,0,3,129,81,129,0,3,17,33,18,147,17,0,3,129,81,129,0,2,19,145,17,147,17,0,1,129,81,129,0,4,19,145,17,147,17,0,1,129,0,6,19,145,17,146,17,129,81,129,0,6,19,145,18,0,2,129,0,8,20,0,2,129,0,10,18,0,4,129,0,14,129,0,47,};
	extern const unsigned char text[]={0,22,17,0,14,19,0,13,19,0,13,20,0,11,17,0,1,19,0,11,17,0,1,20,0,9,17,0,3,19,0,9,17,0,3,20,0,8,24,0,7,17,0,5,20,0,6,17,0,6,19,0,4,20,0,3,23,0,50,};
	extern const unsigned char line[]={0,17,18,0,15,18,0,15,18,0,15,18,0,15,18,0,15,18,0,15,18,0,15,18,0,15,18,0,15,18,0,15,18,0,15,18,0,15,18,0,33,};
	extern const unsigned char curve[]={0,6,18,0,15,18,0,15,18,0,15,17,0,15,17,0,14,18,0,13,18,0,13,18,0,13,18,0,13,18,0,14,17,0,15,17,0,15,18,0,15,18,0,15,18,0,24,};
	extern const unsigned char rectangle[]={0,32,31,0,1,17,93,17,0,1,17,93,17,0,1,17,93,17,0,1,17,93,17,0,1,17,93,17,0,1,17,93,17,0,1,17,93,17,0,1,17,93,17,0,1,17,93,17,0,1,31,0,49,};
	extern const unsigned char polygon[]={0,20,25,0,7,17,86,17,0,8,17,86,17,0,7,17,86,17,0,8,17,86,17,0,7,17,86,17,0,8,17,86,17,0,7,17,86,17,0,8,17,85,23,0,3,17,91,17,0,2,17,92,17,0,2,17,92,17,0,2,30,0,34,};
	extern const unsigned char ellipse[]={0,52,23,0,7,18,87,18,0,4,17,91,17,0,2,17,93,17,0,1,17,93,17,0,1,17,93,17,0,1,17,93,17,0,2,17,91,17,0,4,18,87,18,0,7,23,0,53,};
	extern const unsigned char rounded_rectangle[]={0,34,27,0,4,17,91,17,0,2,17,93,17,0,1,17,93,17,0,1,17,93,17,0,1,17,93,17,0,1,17,93,17,0,1,17,93,17,0,1,17,93,17,0,2,17,91,17,0,4,27,0,51,};

	extern const char selection_transparency[]=
	{
		0,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,0,0,0,0,0,0,0,
		0,64,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,64,0,0,0,0,0,0,0,
		0,64,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,64,0,0,0,0,0,0,0,
		0,64,124,124,124,124,106,65,65,65,65,85,124,124,124,124,124,124,124,64,64,124,64,64,124,64,64,124,64,64,0,64,64,0,64,64,
		0,64,124,124,124,106,65,67,67,67,67,65,85,124,124,124,124,124,64,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,64,
		0,64,124,124,124,65,106,67,67,67,67,67,64,124,124,124,124,124,64,127,127,127,127,127,127,68,68,68,68,68,68,85,127,127,127,0,
		0,64,124,124,124,65,106,106,67,67,67,106,64,124,124,124,124,124,124,127,127,127,127,127,68,68,68,68,68,68,106,64,127,127,127,64,
		0,64,124,124,124,65,106,127,106,106,106,65,64,124,124,124,124,124,64,127,127,127,127,68,68,68,68,68,68,106,68,64,127,127,127,64,
		0,64,124,124,124,65,106,127,67,67,67,65,64,124,124,124,124,124,64,127,127,127,68,127,127,127,127,127,127,68,68,64,127,127,127,0,
		0,64,124,124,124,65,106,127,67,67,67,65,64,124,124,124,124,124,124,127,127,127,68,127,76,76,76,76,76,68,68,64,127,127,127,64,
		0,64,124,124,124,65,106,127,67,67,67,65,64,124,124,124,124,124,64,127,127,127,68,127,76,76,76,76,76,68,68,64,127,127,127,64,
		0,64,124,124,124,65,106,127,67,67,67,65,64,124,80,80,80,80,64,127,127,127,68,127,76,76,76,76,76,68,68,64,127,127,127,0,
		0,64,124,124,124,65,106,127,67,67,67,65,80,80,106,115,112,64,80,127,127,127,68,127,76,76,76,76,76,68,68,64,85,85,85,64,
		0,64,124,124,124,65,106,127,67,67,67,65,80,106,115,112,112,112,64,127,127,127,68,127,76,76,76,76,76,68,64,85,85,85,85,64,
		0,64,124,124,124,65,106,127,67,67,67,80,106,115,112,112,112,112,64,127,127,127,68,127,76,76,76,76,76,64,85,85,85,85,127,0,
		0,64,124,124,124,65,67,127,67,67,67,80,106,115,112,112,112,112,112,127,127,127,64,64,64,64,64,64,64,85,85,85,85,127,127,64,
		0,64,124,124,124,106,65,65,65,65,65,80,106,115,112,112,112,112,64,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,64,
		0,64,124,124,124,124,106,64,64,64,64,80,106,115,112,112,112,112,64,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,0,
		0,64,124,124,124,124,124,124,124,124,124,85,80,106,115,112,112,64,80,80,64,84,64,64,124,64,64,124,64,64,0,64,64,0,64,64,
		0,64,124,124,124,124,124,124,124,124,124,124,80,80,80,80,80,80,64,64,84,84,84,84,124,124,124,124,64,0,0,0,0,0,0,0,
		0,64,124,124,124,124,124,124,124,124,124,124,124,85,64,64,64,64,85,84,84,84,106,124,124,124,124,124,64,0,0,0,0,0,0,0,
		0,64,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,64,0,0,0,0,0,0,0,
		0,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,0,0,0,0,0,0,0,
		0,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,0,0,0,0,0,0,0,
		0,64,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,64,0,0,0,0,0,0,0,
		0,64,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,64,0,0,0,0,0,0,0,
		0,64,124,124,124,124,106,65,65,65,65,85,124,124,124,124,124,124,124,64,64,124,64,64,124,64,64,124,64,64,0,64,64,0,64,64,
		0,64,124,124,124,106,65,67,67,67,67,65,85,124,124,124,124,124,64,124,124,124,124,124,124,124,124,124,64,0,0,0,0,0,0,64,
		0,64,124,124,124,65,106,67,67,67,67,67,64,124,124,124,124,124,64,124,124,124,124,124,124,68,68,68,68,68,68,85,0,0,0,0,
		0,64,124,124,124,65,106,106,67,67,67,106,64,124,124,124,124,124,124,124,124,124,124,124,68,68,68,68,68,68,106,64,0,0,0,64,
		0,64,124,124,124,65,106,127,106,106,106,65,64,124,124,124,124,124,64,124,124,124,124,68,68,68,68,68,68,106,68,64,0,0,0,64,
		0,64,124,124,124,65,106,127,67,67,67,65,64,124,124,124,124,124,64,124,124,124,68,127,127,127,127,127,127,68,68,64,0,0,0,0,
		0,64,124,124,124,65,106,127,67,67,67,65,64,124,124,124,124,124,124,124,124,124,68,127,76,76,76,76,76,68,68,64,0,0,0,64,
		0,64,124,124,124,65,106,127,67,67,67,65,64,124,124,124,124,124,64,124,124,124,68,127,76,76,76,76,76,68,68,64,0,0,0,64,
		0,64,124,124,124,65,106,127,67,67,67,65,64,124,80,80,80,80,64,124,124,124,68,127,76,76,76,76,76,68,68,64,0,0,0,0,
		0,64,124,124,124,65,106,127,67,67,67,65,80,80,106,115,112,64,80,80,124,124,68,127,76,76,76,76,76,68,68,64,0,0,0,64,
		0,64,124,124,124,65,106,127,67,67,67,65,80,106,115,112,112,112,64,80,85,124,68,127,76,76,76,76,76,68,64,0,0,0,0,64,
		0,64,124,124,124,65,106,127,67,67,67,80,106,115,112,112,112,112,64,80,64,124,68,127,76,76,76,76,76,64,0,0,0,0,0,0,
		0,64,124,124,124,65,67,127,67,67,67,80,106,115,112,112,112,112,112,80,64,124,64,64,64,64,64,64,64,0,0,0,0,0,0,64,
		0,64,124,124,124,106,65,65,65,65,65,80,106,115,112,112,112,112,64,80,64,84,106,124,124,124,124,124,64,0,0,0,0,0,0,64,
		0,64,124,124,124,124,106,64,64,64,64,80,106,115,112,112,112,112,64,80,64,84,84,84,124,124,124,124,64,0,0,0,0,0,0,0,
		0,64,124,124,124,124,124,124,124,124,124,85,80,106,115,112,112,64,80,80,64,84,64,64,124,64,64,124,64,64,0,64,64,0,64,64,
		0,64,124,124,124,124,124,124,124,124,124,124,80,80,80,80,80,80,64,64,84,84,84,84,124,124,124,124,64,0,0,0,0,0,0,0,
		0,64,124,124,124,124,124,124,124,124,124,124,124,85,64,64,64,64,85,84,84,84,106,124,124,124,124,124,64,0,0,0,0,0,0,0,
		0,64,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,64,0,0,0,0,0,0,0,
		0,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,0,0,0,0,0,0,0,
	};

	//all brushes
	extern const int width1[]=
	{
		0, 0
	};
	extern const int width2[]=
	{
		-1, 0,
		-1, 0
	};
	extern const int width3[]=
	{
		0, 0,
		-1, 1,
		0, 0
	};
	extern const int width4[]=
	{
		-1, 0,
		-2, 1,
		-2, 1,
		-1, 0
	};
	extern const int width5[]=
	{
		-1, 1,
		-2, 2,
		-2, 2,
		-2, 2,
		-1, 1
	};
	extern const int eraser04[]=
	{
		-2, 1,
		-2, 1,
		-2, 1,
		-2, 1,
	};
	extern const int eraser06[]=
	{
		-3, 2,
		-3, 2,
		-3, 2,
		-3, 2,
		-3, 2,
		-3, 2,
	};
	extern const int eraser08[]=//large_square
	{
		-4, 3,
		-4, 3,
		-4, 3,
		-4, 3,
		-4, 3,
		-4, 3,
		-4, 3,
		-4, 3
	};
	extern const int eraser10[]=
	{
		-5, 4,
		-5, 4,
		-5, 4,
		-5, 4,
		-5, 4,
		-5, 4,
		-5, 4,
		-5, 4,
		-5, 4,
		-5, 4,
	};
	extern const int large_disk[]=
	{
		-1, 1,
		-2, 2,
		-3, 3,
		-3, 3,
		-3, 3,
		-2, 2,
		-1, 1
	};
	extern const int disk[]=
	{
		-1, 0,
		-2, 1,
		-2, 1,
		-1, 0
	};
	extern const int dot[]=
	{
		0, 0
	};
	extern const int *large_square=eraser08;
	extern const int square[]=
	{
		-2, 2,
		-2, 2,
		-2, 2,
		-2, 2,
		-2, 2
	};
	extern const int small_square[]=
	{
		-1, 0,
		-1, 0
	};
	extern const int large_right45[]=
	{
		3, 3,
		2, 2,
		1, 1,
		0, 0,
		-1, -1,
		-2, -2,
		-3, -3,
		-4, -4
	};
	extern const int right45[]=
	{
		2, 2,
		1, 1,
		0, 0,
		-1, -1,
		-2, -2
	};
	extern const int small_right45[]=
	{
		0, 0,
		-1, -1
	};
	extern const int large_left45[]=
	{
		-4, -4,
		-3, -3,
		-2, -2,
		-1, -1,
		0, 0,
		1, 1,
		2, 2,
		3, 3
	};
	extern const int left45[]=
	{
		-2, -2,
		-1, -1,
		0, 0,
		1, 1,
		2, 2
	};
	extern const int small_left45[]=
	{
		-1, -1,
		0, 0
	};
	struct		Brush
	{
		const int *bounds;
		int yoffset, ysize;
	};
	extern const Brush brushes[]=
	{
		{nullptr, 0, 0},
		{width1, 0, 1}, {width2, -1, 2}, {width3, -1, 3}, {width4, -2, 4}, {width5, -2, 5},
		{eraser04, -2, 4}, {eraser06, -3, 6}, {eraser08, -4, 8}, {eraser10, -5, 10},
		{large_disk, -3, 7}, {disk, -2, 4}, {dot, 0, 1},
		{large_square, -4, 8}, {square, -2, 5}, {small_square, -1, 2},
		{large_right45, -4, 8}, {right45, -2, 5}, {small_right45, -1, 2},
		{large_left45, -4, 8}, {left45, -2, 5}, {small_left45, -1, 2}
	};
	extern const int nbrushes=sizeof(brushes);

	extern const int resizemark_even_w=20, resizemark_odd_w=19, resizemark_h=10;
	extern const int resizemark_even[10]=
	{
		0xFF9FF,//pointing up
		0xFF0FF,
		0xFE07F,
		0xFC03F,
		0xF801F,
		0xF000F,
		0xE0007,
		0xC0003,
		0x80001,
		0xFFFFF,
	};
	extern const int resizemark_odd[10]=
	{
		0x7FDFF,//pointing up
		0x7F8FF,
		0x7F07F,
		0x7E03F,
		0x7C01F,
		0x7800F,
		0x70007,
		0x60003,
		0x40001,
		0x7FFFF,
	};
}
void			unpack_icon(const unsigned char *rle, int csize, int *rgb2)
{
	enum Color{C_TRANSPARENT, C_BLACK, C_WHITE, C_YELLOW, C_MUSTARD, C_GREY, C_MARINE, C_DARK_GREY, C_DARK_BLUE, C_BLUE, C_DARK_RED};
	for(int kp=0, kc=0;kc<csize;++kc)
	{
		auto &latest=rle[kc];
		int color, count;
		if(latest)
			color=latest>>4, count=latest&15;
		else//zero is transparent, count is in the next cell
			++kc, color=0, count=rle[kc];
		switch(color)//0x??RRGGBB
		{
		case C_TRANSPARENT:	color=0x00FF00FF;break;//transparent is pink
	//	case C_TRANSPARENT:	color=0x00E3E3E3;break;
	//	case C_TRANSPARENT:	color=0x00F0F0F0;break;
		case C_BLACK:		color=0x00000000;break;
		case C_WHITE:		color=0x00FFFFFF;break;
		case C_YELLOW:		color=0x00FFFF00;break;
		case C_MUSTARD:		color=0x00BFBF00;break;
		case C_GREY:		color=0x00C0C0C0;break;
		case C_MARINE:		color=0x0000BFBF;break;
		case C_DARK_GREY:	color=0x00808080;break;
		case C_DARK_BLUE:	color=0x000000BF;break;
		case C_BLUE:		color=0x000000FF;break;
		case C_DARK_RED:	color=0x00BF0000;break;
		default:
			{
				int LOL_1=0;//unreachable
			}
			break;
		}
		int k2=0;
		for(;k2<count;++k2)
		{
			int idx=kp+k2;
			int ki=idx>>8, kx=idx&15, ky=idx>>4&15;
		//	if(color!=0xFFF0F0F0)//
				rgb2[ky<<4|kx]=color;
		}
		kp+=k2;
	}
}
void			unpack_icons(int *&icons, int &nicons)
{
	const unsigned char *rle_icons[]=
	{
		resources::free_select,	resources::select,		resources::eraser,	resources::fill,
		resources::pick_color,	resources::magnifier,	resources::pencil,	resources::brush,
		resources::airbrush,	resources::text,		resources::line,	resources::curve,
		resources::rectangle,	resources::polygon,		resources::ellipse,	resources::rounded_rectangle,
	};
	int lengths[]=
	{
		sizeof resources::free_select,	sizeof resources::select,		sizeof resources::eraser,	sizeof resources::fill,
		sizeof resources::pick_color,	sizeof resources::magnifier,	sizeof resources::pencil,	sizeof resources::brush,
		sizeof resources::airbrush,		sizeof resources::text,			sizeof resources::line,		sizeof resources::curve,
		sizeof resources::rectangle,	sizeof resources::polygon,		sizeof resources::ellipse,	sizeof resources::rounded_rectangle,
	};
	nicons=sizeof(lengths)>>2;
	icons=(int*)malloc(256*nicons<<2);
	for(int ki=0;ki<nicons;++ki)
		unpack_icon(rle_icons[ki], lengths[ki], icons+(ki<<8));
}